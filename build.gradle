plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'teamchallenge'
version = '1'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.liquibase:liquibase-core'
	implementation 'io.jsonwebtoken:jjwt:0.12.5'
	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.12.0'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

tasks.withType(Test).configureEach {
	systemProperty 'file.encoding', 'UTF-8'
}

tasks.withType(JavaExec).configureEach {
	systemProperty 'file.encoding', 'UTF-8'
}

processResources {
	filesMatching('**/*.sql') {
		filter { String line -> line.getBytes('UTF-8') }
	}
}

tasks.named('test') {
	useJUnitPlatform()
}
jar {
	manifest {
		attributes 'Main-Class': 'teamchallenge.server.ServerApplication'
	}
}
